<!doctype html>
<!--
This html document and its corresponding files are licensed under the Creative
Commons Unported License (CC BY 3.0).
See http://creativecommons.org/licenses/by/3.0/ for details.

Basically, you're free to use this work in any manner, as long as attribution
is provided. If the design is kept roughly the same, please leave the "Designed
by Ehsanul Hoque" link at the bottom of the footer intact, along with the CC/BY
link and icons. In addition, please leave this entire comment intact.
-->

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="keywords" content="ehsanul, hoque, web developer, resume"/>
  <meta name="viewport" content="width=device-width">

  <title>Resume of Ehsanul Hoque</title>

  <!--[if lt IE 9]>
  <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

  <link rel="stylesheet" type="text/css" href="/css/resume-reset.css"/>
  <link rel="stylesheet" type="text/css" href="/css/resume.css"/>

  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
  <script type="text/javascript">
    // detailHeights required for a hack, working around a jquery bug:
    //   http://www.pewpewlaser.com/articles/jquery-smooth-animation
    var detailHeights  = {}
    function setDetailHeight(id){
      detail = $(id)
      if (detail.css('display') === 'none'){
        detail.show()
        detail.height('auto') // get proper height
        detailHeights[id] = detail.height()
        detail.hide()
      } else {
        detail.height('auto')
        detailHeights[id] = detail.height()
      }
    }

    $(document).ready(function(){

      $('a').filter(function(){

        // filter for anchors containing fragment identifiers
        var l = window.location
        var regstr = l.host + l.pathname + '#'
        if ((new RegExp(regstr)).test(this.href))
          return true

      }).each(function(){

        // get the corresponding element, move it, hide it
        var anchor = $(this)
        var id = this.href.match(/#\w*/i)[0]
        var detail = $(id)
        anchor.addClass('detail')
        anchor.parent().append( detail.remove() )
        setDetailHeight(id) // hack, see above
        detail.hide()

        anchor.click(function(){
          // anchor styling
          anchor.toggleClass('detail-active')
          anchor.siblings('a').removeClass('detail-active')

          // show/hide detail, hide detail's siblings
          t = 300 + detail.html().length / 8
          detail.siblings('div.detail').slideUp(t)
          detail.height(detailHeights[id]) // hack, see above
          detail.slideToggle(t)
          return false
        })

      })
    })

    // hack, see above
    $(window).resize(function() {
      for (var id in detailHeights)
        setDetailHeight(id)
    });
  </script>
</head>

<body>

  <header>
    <h1><a href="/">Ehsanul Hoque</a></h1>
    <address>
      <a href="mailto:ehsanul@ehsanul.com">ehsanul@ehsanul.com</a><br/>
      (347) 679 9621
    </address>
  </header>

  <section>
    <h2>Profile</h2>
    <p id="profile">
      I’m a web developer and generalist, with a <em>passion for startups.</em>
      I’m quick to learn and my skills range from game programming to query
      optimization.
    </p><p>
      Please <a href="#instructions">click here.</a>
    </p>
  </section>


  <section> <h2>Projects</h2>
    <table>

      <tr><th><a href="http://jellly.com/">Jellly</a></th>
        <td>

          <ul><li>
            Suggests relevant links as you browse the web, via
            bookmarklet/add-on.
          </li><li>
            Works by <em>automatically extracting keywords</em> to search for
            related content.
          </li></ul>

          <ul class="bulleted"><li>
            Sole <a href="#cofounder"><em>technical co-founder</em></a>
          </li><li>
            Integrated Java machine learning tools (via JRuby/Sinatra) with
            client-side unsupervised keyword extraction algorithms for superior
            keywords.
          </li><li>
            Tuned <a href="#scoring">scoring</a> algorithms for
            ranking the results from various sources.
          </li></ul>

        </td>
      </tr>

      <tr><th>Xarkon</th>
        <td>

          <ul><li>
            Real-time, physics-based MMO game built with Node.js.
          </li><li>
            Play the original JS prototype on Chrome:
            <a href="http://xarkon.com/spaceball.html"><span class="nowrap">Xarkon Spaceball</span></a>
          </li></ul>

          <ul class="bulleted"><li>
            Wrote a <a href="#component">components library</a> for non-hierarchical code-sharing
          </li><li>
            Custom <a href="#engine">game engine</a>, written in CoffeeScript
          </li></ul>

        </td>
      </tr>
    </table>
  </section>


  <section> <h2>Technical Skills</h2>
    <table>

      <tr><th>Programming</th>
        <td>
          <ul><li>
            Proficient in <a href="#ruby">Ruby</a> and
            <a href="#js">JavaScript / CoffeeScript</a>
          </li><li>
          Familiar with <a href="#python">Python</a>,
                        <a href="#php">PHP</a>, and
                        <a href="#others">others.</a>
          </li></ul>
        </td>
      </tr>

      <tr><th>Client-side</th>
        <td>
          Experienced writing XHTML, <a href="#html5">HTML5</a>, CSS2/3, JS
        </td>
      </tr>

      <tr><th>Databases</th>
        <td>
          <ul><li>
            Experienced with <a href="#postgresql">PostgreSQL</a>
          </li><li>
            Familiar with MongoDB and MySQL
          </li></ul>
        </td>
      </tr>

      <tr><th>Sys Admin</th>
        <td>
          <ul><li>
            Experienced with <a href="#linux">Linux</a> (Ubuntu/CentOS) and
            <a href="#unix">Unix tools.</a>
          </li></ul>
        </td>
      </tr>

    </table>
  </section>


  <section> <h2>Experience</h2>
    <table>

      <tr><td>2010–2011</td>
        <td>
          Lead Developer and DBA at Vebsite
          <ul class="bulleted"><li>
            <a class="first-detail" href="#data">Data processing</a> on the order of a <em>billion
              records</em> with Ruby
          </li><li>
            Managed several PostgreSQL database servers
          </li><li>
            Miscellaneous PHP programming and Linux server administration
          </li></ul>
        </td>
      </tr>

    </table>
  </section>


  <section> <h2>Education</h2>
    <table>

      <tr><td>May 2010</td>
        <td>
          <ul><li>
            <strong>Bachelor of Science</strong> in Mechanical Engineering
          </li><li>
            <em>New Jersey Institute of Technology</em>,
            <span class="nowrap">Newark, New Jersey</span>
          </li><li>
            GPA: <em>3.71</em>
          </li></ul>
        </td>
      </tr>

      <tr><td>June 2006</td>
        <td>
          <ul><li>
            Advanced Level General Certificate of Education <span class="nowrap">(A-Levels)</span>
          </li><li>
            <em>Cambridge International Examinations</em>
          </li><li>
            Subjects: Mathematics, Physics, Economics, Accounting
          </li><li>
            Grades: A in each subject, with <a href="#awards"><em>national awards</em></a> in two
          </li></ul>
        </td>
      </tr>

    </table>
  </section>


  <section id="details">

    <div class="detail" style="display:none" id="instructions">
        You can click the <a href="#">dash-underlined</a> words for more details.
        Click again to dismiss.
    </div>

    <div class="detail" id="cofounder">
      <p>
        I originally conceived of Jellly as a way to crowdsource relevant links
        throughout the web – I noticed how people on discussion boards such as
        Hacker News always pointed to relevant web pages of higher quality than
        that which was being discussed. However, the network effects required for
        this to work well were clearly very difficult to bootstrap from scratch.
        So I had to adapt the idea to automatically generating relevant links,
        recommended based on the current web page's content.
      </p><p>
        While the idea changed, I was still the only one actually building it,
        since my co-founder is non-technical. I developed Jellly from conception
        through a couple of prototypes, gradually improving the quality of
        results. I worked on all layers of the web application stack, from the
        frontend to database design, from server administration and deployment,
        to experimenting with different features for use with the machine
        learning algorithm.
      </p><p>
        Finally, I must mention that Jellly is really more of a project than
        a startup, since it hasn't earned me a penny and has had few users, even
        though I would have liked for it to have been a proper startup. It is
        currently on hold, since my co-founder has had to resume a normal job.
      </p>
    </div>

    <div class="detail" id="scoring">
      <p>
        Seven different searches are performed, resulting in dozens of results of
        varying quality, which must be ranked.
      </p><p>
        Scoring is kept very simple and focuses on the results' titles. Words in
        the titles are matched against the extracted keywords/tags relevant to
        the current page.  Positive matches result in a result score boost
        commensurate with the keyword's importance to the current web page.
        Partial matches result in partial boosts. Thus the top results are always
        relevant, given relevant keywords.
      </p><p>
        The boost also depends on the source of the result and other factors.
        For example, if the result is from delicious, the boost is proportional
        to the logarithm of the number of times the current page has been
        bookmarked. This is because the more bookmarks, the greater chance that
        delicious will have other similar web pages bookmarked, with similar
        tags.
      </p><p>
        TODO: Machine learning for ranking results.
      </p>
    </div>

    <div class="detail" id="component">
      <p>
        <a href="http://ehsanul.github.com/component/">Component.coffee</a>
        is a minimal library providing an easy way to share functionality between
        objects when classical inheritance isn't enough. It provides the side
        benefit of very shallow JavaScript prototype chains for all objects,
        which is <a
          href="http://jsperf.com/prototype-chain-short-vs-long2">significantly
          faster</a> than using classical inheritance to set up a prototype
        chain.
      </p>
    </div>

    <div class="detail" id="engine">
      <p>
        I chose not to use any of the existing JS game engines because half the
        point of working on this game was to learn. While this means it took
        longer to get the up and game running, I learnt a lot while doing it. In
        addition, I needed game logic to run server-side, since it's
        a multiplayer game, but existing game engines generally assume
        single-player games.
      </p><p>
        I've implemented simple physics, learned how to do fast collision
        detection using spatial data structures and considered many compression
        schemes and other ways to reduce bandwidth use. In the works is
        a rendering library abstracting different rendering backends
        (HTML/CSS, canvas and SVG). I also plan to make it easy to parallelize
        game logic via multiple node processes, each responsible for a chunk of
        the map, communicating with each other to transfer moving objects.
      </p>
    </div>

    <div class="detail" id="ruby">
      <p>
        Ruby was my first general purpose programming language, almost 4 years
        ago. I had begun learning Rails then, but ended up far more interested in
        the language itself.
      </p><p>
        Now whenever I need to write some little command-line utility, I reach
        for Ruby. And when I need to write a web service, I turn to Sinatra. Ruby
        is basically my favorite language for general scripting and web
        development.
      </p>
    </div>

    <div class="detail" id="js">
      <p>
        I did not realize what a great language JavaScript could  be until
        a couple of years ago, around the time I read <cite>JavaScript: The Good
        Parts</cite>. I've since learnt a lot about the language, and even
        started playing around with Node.js for fun.
      </p><p>
        More recently, I've been addicted to CoffeeScript, which along with
        libraries such as jQuery and Underscore.js, makes writing JS code as
        enjoyable as writing Ruby or Python. In fact, I may even prefer
        CoffeeScript to both Ruby and Python now, since they've taken the best of
        both worlds and combined it with the awesomeness of JavaScript.
      </p>
    </div>

    <div class="detail" id="python">
      <p>
        I don't have a lot of experience writing Python, but it is similar enough
        to Ruby that it's very easy for me to pick up. I've participated in
        PyWeek, a Python game programming competition, and my lack of experience
        writing in Python really wasn't an issue for me.
      </p><p>
        Other than that, I've written a couple of random scripts in Python and
        have also been helping a friend learn programming using Python. Sorry, no
        pro experience, but I really don't think that's an issue. It takes just
        a matter of weeks to get completely used to a new platform, especially
        one as similar to Ruby as Python.
      </p>
    </div>

    <div class="detail" id="php">
      <p>
        With PHP, I've added features to some existing codebases and have written
        mostly basic CRUD code, accessing PostgreSQL/MySQL. PHP is pretty simple
        to work with, given the nice reference it has, but I do not agree with
        many of the design decisions made in the language and prefer Ruby/Python.
      </p><p>
        That said, when I've had to work in PHP, such as the time I messed around
        with Wordpress, it's never been an issue (besides dealing with poor code,
        but that's true for any language).
      </p>
    </div>

    <div class="detail" id="html5">
      <p>
        HTML5 is the new buzzword, and has become an umbrella term for everything
        new on the client-side web. This is a pet-peeve of mine, since of course
        HTML5 actually refers to a much more limited specification, basically
        a <a href="http://www.w3.org/TR/html5-diff/">modified and extended HTML4</a>.
      </p><p>
        I do stay on top of things as far as new client-side tech is concerned,
        and play with new APIs as they come out. It can get quite exciting, as
        long as you ignore the fact that everything now possible on the web was
        possible years ago on desktop software (though the web is more portable
        than most desktop software).
      </p>
    </div>

    <div class="detail" id="others">
      <p>
        I've noodled around with a bunch of languages, just for fun and to learn.
        For example, I learnt Scheme (which is lovely) while going through the
        first parts of <cite>SICP</cite>. Writing functional code can be pretty exciting when
        you first get into it! I've also done a little programming in Common Lisp,
        learning from <cite>Practical Common Lisp</cite> and
        <cite>Land of Lisp</cite>, but I do prefer the elegant minimalism of
        Scheme.
      </p><p>
        I'm very interested in learning other programming paradigms. I often work
        through things like the official introductions to <a
          href="http://www.erlang.org/documentation/doc-5.8.5/doc/getting_started/users_guide.html">Erlang</a>
        and <a href="http://www.jsoftware.com/help/primer/contents.htm">J</a>,
        but it'll be a while before I'm very familiar with any of these
        languages. I plan to add Prolog, Factor, Erlang, J and  Haskell to the
        list of languages I know, hopefully assimilating new ways of thinking in
        the process.
      </p><p>
        In the same vein, I recently learned a nice pattern-matching language
        called <a href="http://www.tinlizzie.org/ometa/">OMeta</a> which allows
        a very simple way of writing compilers. You basically define a parsing
        expression grammar with some extended semantics, but this grammar can be
        applied to trees. That means you can use the same syntax to do AST
        transformations and code generation. I'm trying my hand at a CoffeeScript
        compiler in OMeta/JS, and it's coming along rather nicely.
      </p><p>
        Finally, I know a tiny bit of C, which I learned writing a program to attempt to
        break ReCaptcha (just for fun). I abandoned the project a very long
        time ago, so my C skills are not as existent as I'd like them to be. To
        that end, I'm just starting to work through <Cite>Learn C The Hard
        Way</cite>.
      </p>
    </div>

    <div class="detail" id="postgresql">
      <p>
        PostgreSQL is a great RDBMS, and I'm better for having worked with it.
        A lot of my experience with Postgres was at my last job, where I handled
        a few slightly large (150m+ rows, 100GB+ data) databases on relatively
        modest hardware. I designed the database schemas and handled their setup
        and administration. I optimized queries such as one which required
        cross-checking other datasets against the full database for any possible
        matches, working around the fact that available memory could never hold
        the full database.
      </p><p>
        I learned most of what I know by combing through the documentation, which
        is very comprehensive and informative. I've used it to tune all relevant
        performance related configuration settings, set up automatic partitioning
        for large tables using trigger functions, set up tablespaces on SSDs for
        faster random access performance, force page caching on Linux via
        sequential reads on HDDs so that random accesses are fast later etc. All
        in all, I learned quite a lot, though I've honestly got nothing on the
        guys who hang out at #postgresql on IRC.
      </p>
    </div>

    <div class="detail" id="linux">
      <p>
        I've been using Linux for several years, both on the server and
        personally, and have experience setting up and configuring all sorts of
        software and hardware. I'm practically a fanboy, if Linux could
        be said to have fanboys.
      </p><p>
        While I can write platitude upon platitude about why I love Linux,
        I think Neal Stephenson explained it best in his essay, <cite>In the
          Beginning was the Command Line</cite>, particularly in the section
        entitled <cite><a href="http://www.team.net/mjb/hawg.html">The Hole Hawg
            of Operating Systems</a></cite>
      </p>
    </div>

    <div class="detail" id="unix">
      <p>
        I use unix tools on a daily basis. It's practically a matter of survival,
        since I regularly manage servers over <code>ssh</code>. I also don't use
        a regular desktop environment, so I spend half my time in the terminal.
      </p><p>
        I'm quite familiar with adminstrative tools such as <code>iostat</code>,
        <code>fdisk</code>, <code>ps</code>, <code>top</code>,
        <code>parallel</code> and many more, as well as text manipulation
        commands such as <code>ack</code>, <code>cut</code>, <code>uniq</code>,
        <code>sed</code> and others. I should also mention that my main text
        editor, for both code and configuration files, is <code>vim</code>.
      </p><p>
        I can deal with package management as well, though I prefer this on
        Ubuntu compared to Centos due to how out of date most Centos repositories
        are. I always end up compiling a few things from source on Centos, which
        is undesirable from an administrative perspective and sometimes a pain in
        terms of tracking down dependencies.
      </p>
    </div>

    <div class="detail" id="data">
      <p>
        I was given a few thousand plaintext files of records, with varying
        formats, columns and column names. There were about a billion records,
        all together, and they had to be cleaned up, aggressively deduplicated
        and imported into a database. I will attempt to explain exactly what
        I did below, with as much detail as I believe my employer would find
        acceptable.
      </p><p>
        I wrote a Ruby script that parsed each file and determined what each
        column represented (since each file had a different format), and then
        normalized the format. Each column's data was also strictly validated and
        normalized, while records with any bad data went to separate files for
        later investigation and cleanup.
      </p><p>
        Finally, the script partitioned output into 26 files according to the
        first letter of the first column (first name). This was done to make the
        subsequent sorting phase faster. Sorting was required for fast
        deduplication (the next step), and was done by simply using GNU
        <code>sort</code>, with options appropriately set in order to handle
        large files gracefully.
      </p><p>
        Next was deduplication of records, which I did with another Ruby script.
        If all columns were always present, and always had consistent data
        between duplicate records, I could just run <code>uniq</code> over the
        files and call it a day. However, duplicates were not so simple to
        detect, given the lack of a trusted primary key and inconsistent data.
      </p><p>
        For example, consider detecting duplicate people using name and address
        together. Addresses are often written in several different ways and
        require some sort of fuzzy matching to catch most duplicates. I ended up
        using an empirical threshold score for levenshtein distances on street
        addresses, combined with bonuses and penalties for matching
        city/zip/state. Also, people often change address, so other unique
        combination of fields were identified by analyzing the data, leading to
        better deduplication.
      </p><p>
        Also note that the sorting done before made sure all duplicates were very
        near to each other in terms of which lines they appeared on (since the
        columns most relevant to deduplication were first), but not always right
        beside each other. This had to be dealt with by my script.
      </p><p>
        Duplicate records were combined, accumulating multiple addresses and
        phone numbers, while keeping track of how recent each was, as well as
        filling in details for records with missing fields. Finally, the
        deduplicated records were batch-inserted into PostgreSQL. Counting the
        final data set revealed that well over 80% of the original data had
        consisted of duplicates.
      </p>
    </div>

    <div class="detail" id="awards">
      <p>
        I won national awards for the best score in the A-Level final exams for
        both Mathematics and Economics. These were awarded by <em>University of
          Cambridge International Examinations</em> for the country of Saudi
        Arabia, where I spent my teenage years.
      </p><p>
        In Saudi Arabia, almost all students in English curricula take part in
        the A-Levels, which amounts to several thousand students annually for
        common subjects like Math.
      </p>
    </div>

  </section>


  <footer>
    <div id="downloads">
      <a href="/resume.pdf"><img src="/images/pdf.png"/>PDF Resume</a>
      <a href="/resume.txt"><img src="/images/plaintext.png"/>Plaintext Resume</a>
    </div>
    <div id="attribution">
      <a href="http://creativecommons.org/licenses/by/3.0/">
        <img alt="cc: creative commons" src="/images/cc.png"/><img alt="by: attribution" src="/images/by.png"/>
      </a>
      <span>
        Designed by <a href="http://ehsanul.com/">Ehsanul Hoque</a>
      </span>
    </div>
  </footer>

</body>
</html>
